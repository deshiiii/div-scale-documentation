window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "divAtScale.src.bipartite_config", "modulename": "divAtScale.src.bipartite_config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.docs", "modulename": "divAtScale.src.bipartite_config.docs", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf", "modulename": "divAtScale.src.bipartite_config.docs.conf", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf.extensions", "modulename": "divAtScale.src.bipartite_config.docs.conf", "qualname": "extensions", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;sphinx.ext.autodoc&#x27;, &#x27;sphinx.ext.doctest&#x27;, &#x27;sphinx.ext.mathjax&#x27;, &#x27;sphinx.ext.viewcode&#x27;]"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf.templates_path", "modulename": "divAtScale.src.bipartite_config.docs.conf", "qualname": "templates_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;_templates&#x27;]"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf.source_suffix", "modulename": "divAtScale.src.bipartite_config.docs.conf", "qualname": "source_suffix", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.rst&#x27;"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf.master_doc", "modulename": "divAtScale.src.bipartite_config.docs.conf", "qualname": "master_doc", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;index&#x27;"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf.project", "modulename": "divAtScale.src.bipartite_config.docs.conf", "qualname": "project", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Bipartite Configuration Model&#x27;"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf.copyright", "modulename": "divAtScale.src.bipartite_config.docs.conf", "qualname": "copyright", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;2016, Mika J. Straka&#x27;"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf.version", "modulename": "divAtScale.src.bipartite_config.docs.conf", "qualname": "version", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;1.2&#x27;"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf.release", "modulename": "divAtScale.src.bipartite_config.docs.conf", "qualname": "release", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;1.2&#x27;"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf.exclude_patterns", "modulename": "divAtScale.src.bipartite_config.docs.conf", "qualname": "exclude_patterns", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;_build&#x27;]"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf.pygments_style", "modulename": "divAtScale.src.bipartite_config.docs.conf", "qualname": "pygments_style", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;sphinx&#x27;"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf.html_theme", "modulename": "divAtScale.src.bipartite_config.docs.conf", "qualname": "html_theme", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;default&#x27;"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf.html_static_path", "modulename": "divAtScale.src.bipartite_config.docs.conf", "qualname": "html_static_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;_static&#x27;]"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf.htmlhelp_basename", "modulename": "divAtScale.src.bipartite_config.docs.conf", "qualname": "htmlhelp_basename", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;BipartiteConfigurationModeldoc&#x27;"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf.latex_elements", "modulename": "divAtScale.src.bipartite_config.docs.conf", "qualname": "latex_elements", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf.latex_documents", "modulename": "divAtScale.src.bipartite_config.docs.conf", "qualname": "latex_documents", "kind": "variable", "doc": "<p></p>\n", "default_value": "[(&#x27;index&#x27;, &#x27;BipartiteConfigurationModel.tex&#x27;, &#x27;Bipartite Configuration Model for Python - Documentation&#x27;, &#x27;Mika J. Straka&#x27;, &#x27;manual&#x27;)]"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf.man_pages", "modulename": "divAtScale.src.bipartite_config.docs.conf", "qualname": "man_pages", "kind": "variable", "doc": "<p></p>\n", "default_value": "[(&#x27;index&#x27;, &#x27;bipartiteconfigurationmodel&#x27;, &#x27;Bipartite Configuration Model for Python - Documentation&#x27;, [&#x27;Mika J. Straka&#x27;], 1)]"}, {"fullname": "divAtScale.src.bipartite_config.docs.conf.texinfo_documents", "modulename": "divAtScale.src.bipartite_config.docs.conf", "qualname": "texinfo_documents", "kind": "variable", "doc": "<p></p>\n", "default_value": "[(&#x27;index&#x27;, &#x27;BipartiteConfigurationModel&#x27;, &#x27;Bipartite Configuration Model Documentation&#x27;, &#x27;Mika J. Straka&#x27;, &#x27;BipartiteConfigurationModel&#x27;, &#x27;One line description of project.&#x27;, &#x27;Miscellaneous&#x27;)]"}, {"fullname": "divAtScale.src.bipartite_config.src", "modulename": "divAtScale.src.bipartite_config.src", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm", "modulename": "divAtScale.src.bipartite_config.src.bicm", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM", "kind": "class", "doc": "<p>Bipartite Configuration Model for undirected binary bipartite networks.</p>\n\n<p>This class implements the Bipartite Configuration Model (BiCM), which can\nbe used as a null model for the analysis of undirected and binary bipartite\nnetworks. The class provides methods for calculating the biadjacency matrix\nof the null model and for quantifying node similarities in terms of\np-values.</p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.__init__", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.__init__", "kind": "function", "doc": "<p>Initialize the parameters of the BiCM.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bin_mat</strong>:  binary input matrix describing the biadjacency matrix\nof a bipartite graph with the nodes of one layer along the rows\nand the nodes of the other layer along the columns.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bin_mat</span></span>)</span>"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.bin_mat", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.bin_mat", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.dseq", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.dseq", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.dim", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.dim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.sol", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.sol", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.adj_matrix", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.adj_matrix", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.input_queue", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.input_queue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.output_queue", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.output_queue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.check_input_matrix_is_binary", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.check_input_matrix_is_binary", "kind": "function", "doc": "<p>Check that the input matrix is binary, i.e. entries are 0 or 1.</p>\n\n<p>:raise AssertionError: raise an error if the input matrix is not\n    binary</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.set_degree_seq", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.set_degree_seq", "kind": "function", "doc": "<p>Return the node degree sequence of the input matrix.</p>\n\n<p>:returns: node degree sequence [degrees row-nodes, degrees column-nodes]</p>\n\n<p>:raise AssertionError: raise an error if the length of the returned\n    degree sequence does not correspond to the total number of nodes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.make_bicm", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.make_bicm", "kind": "function", "doc": "<p>Create the biadjacency matrix of the BiCM null model.</p>\n\n<p>Solve the log-likelihood maximization problem to obtain the BiCM\nnull model which respects constraints on the degree sequence of the\ninput matrix.</p>\n\n<p>The problem is solved using <code>scipy</code>'s root function with the solver\ndefined by <code>method</code>. The status of the solver after running\n<code>scipy.root</code>and the difference between the network and BiCM degrees\nare printed in the console.</p>\n\n<p>The default solver is the modified Powell method <code>hybr</code>. Least-squares\ncan be chosen with <code>method='lm'</code> for the Levenberg-Marquardt approach.</p>\n\n<p>Depending on the solver, keyword arguments <code>kwargs</code> can be passed to\nthe solver. Please refer to the <code>scipy.optimize.root documentation\n&lt;https://docs.scipy.org/doc/scipy-0.19.0/reference/generated/\nscipy.optimize.root.html&gt;</code>_ for detailed descriptions.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>It can happen that the solver <code>method</code> used by <code>scipy.root</code>\ndoes not converge to a solution.\nIn this case, please try another <code>method</code> or different initial\nconditions and refer to the <code>scipy.optimize.root documentation\n&lt;https://docs.scipy.org/doc/scipy-0.19.0/reference/generated/\nscipy.optimize.root.html&gt;</code>_.</p>\n\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x0</strong>:  initial guesses for the solutions. The first entries are the\ninitial guesses for the row-nodes, followed by the initial guesses\nfor the column-nodes.</li>\n<li><strong>method</strong>:  type of solver, default is \u2018hybr\u2019. For other\nsolvers, see the <code>scipy.optimize.root documentation\n&lt;https://docs.scipy.org/doc/\nscipy-0.19.0/reference/generated/scipy.optimize.root.html&gt;</code>_.</li>\n<li><strong>jac</strong>:  Jacobian of the system</li>\n<li><strong>tol</strong>:  tolerance for termination. For detailed control, use\nsolver-specific options.</li>\n<li><strong>callback</strong>:  optional callback function to be called at\nevery iteration as <code>callback(self.equations, x)</code>,\nsee <code>scipy.root</code> documentation</li>\n<li><strong>options</strong>:  a dictionary of solver options, e.g. <code>xtol</code> or\n<code>maxiter</code>, see scipy.root documentation</li>\n<li><strong>kwargs</strong>:  solver-specific options, please refer to the SciPy\ndocumentation</li>\n</ul>\n\n<p>:raise ValueError: raise an error if not enough initial conditions\n    are provided</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x0</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;hybr&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">jac</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.solve_equations", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.solve_equations", "kind": "function", "doc": "<p>Solve the system of equations of the maximum log-likelihood problem.</p>\n\n<p>The system of equations is solved using <code>scipy</code>'s root function with\nthe solver defined by <code>method</code>. The solutions correspond to the\nLagrange multipliers</p>\n\n<p>$$x_i = \\exp(-\\theta_i).$$</p>\n\n<p>Depending on the solver, keyword arguments <code>kwargs</code> can be passed to\nthe solver. Please refer to the <code>scipy.optimize.root documentation\n&lt;https://docs.scipy.org/doc/scipy-0.19.0/reference/generated/\nscipy.optimize.root.html&gt;</code>_ for detailed descriptions.</p>\n\n<p>The default solver is the modified Powell method <code>hybr</code>. Least-squares\ncan be chosen with <code>method='lm'</code> for the Levenberg-Marquardt approach.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>It can happen that the solver <code>method</code> used by <code>scipy.root</code>\ndoes not converge to a solution.\nIn this case, please try another <code>method</code> or different initial\nconditions and refer to the <code>scipy.optimize.root documentation\n&lt;https://docs.scipy.org/doc/scipy-0.19.0/reference/generated/\nscipy.optimize.root.html&gt;</code>_.</p>\n\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x0</strong>:  initial guesses for the solutions. The first entries are the\ninitial guesses for the row-nodes, followed by the initial guesses\nfor the column-nodes.</li>\n<li><strong>method</strong>:  type of solver, default is \u2018hybr\u2019. For other\nsolvers, see the <code>scipy.optimize.root documentation\n&lt;https://docs.scipy.org/doc/\nscipy-0.19.0/reference/generated/scipy.optimize.root.html&gt;</code>_.</li>\n<li><strong>jac</strong>:  Jacobian of the system</li>\n<li><strong>tol</strong>:  tolerance for termination. For detailed control, use\nsolver-specific options.</li>\n<li><strong>callback</strong>:  optional callback function to be called at\nevery iteration as <code>callback(self.equations, x)</code>,\nsee <code>scipy.root</code> documentation</li>\n<li><strong>options</strong>:  a dictionary of solver options, e.g. <code>xtol</code> or\n<code>maxiter</code>, see scipy.root documentation</li>\n<li><strong>kwargs</strong>:  solver-specific options, please refer to the SciPy\ndocumentation\n:returns: solution of the equation system</li>\n</ul>\n\n<p>:raise ValueError: raise an error if not enough initial conditions\n    are provided</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x0</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;hybr&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">jac</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.equations", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.equations", "kind": "function", "doc": "<p>Return the equations of the log-likelihood maximization problem.</p>\n\n<p>Note that the equations for the row-nodes depend only on the\ncolumn-nodes and vice versa, see [Saracco2015]_.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>xx</strong>:  Lagrange multipliers which have to be solved\n:returns: equations to be solved (\\( f(x) = 0 \\))</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">xx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.jacobian", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.jacobian", "kind": "function", "doc": "<p>Return a NumPy array with the Jacobian of the equation system.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>xx</strong>:  Lagrange multipliers which have to be solved\n:returns: Jacobian</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">xx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.get_biadjacency_matrix", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.get_biadjacency_matrix", "kind": "function", "doc": "<p>Calculate the biadjacency matrix of the null model.</p>\n\n<p>The biadjacency matrix describes the BiCM null model, i.e. the optimal\naverage graph \\( <G>^* \\) with the average link probabilities\n\\( <G>^*_{rc} = p_{rc} \\) ,\n\\( p_{rc} = \\frac{x_r \\cdot x_c}{1 + x_r\\cdot x_c}. \\)\n\\( x \\) are the solutions of the equation system which has to be\nsolved for the null model.\nNote that \\( r \\) and \\( c \\) are taken from opposite bipartite\nnode sets, thus \\( r \\neq c \\).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>xx</strong>:  solutions of the equation system (Lagrange multipliers)\n:returns: biadjacency matrix of the null model</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  raise an error if \\( p_{rc} &lt; 0 \\) or\n\\( p_{rc} &gt; 1 \\) for any \\( r, c \\)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">xx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.print_max_degree_differences", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.print_max_degree_differences", "kind": "function", "doc": "<p>Print the maximal differences between input network and BiCM degrees.</p>\n\n<p>Check that the degree sequence of the solved BiCM null model graph\ncorresponds to the degree sequence of the input graph.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.test_average_degrees", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.test_average_degrees", "kind": "function", "doc": "<p>Test the constraints on the node degrees.</p>\n\n<p>Check that the degree sequence of the solved BiCM null model graph\ncorresponds to the degree sequence of the input graph.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>eps</strong>:  maximum difference between degrees of the real network\nand the BiCM</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">0.01</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.lambda_motifs", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.lambda_motifs", "kind": "function", "doc": "<p>Calculate and save the p-values of the \\( \\Lambda \\)-motifs.</p>\n\n<p>For each node couple in the bipartite layer specified by <code>bip_set</code>,\ncalculate the p-values of the corresponding \\( \\Lambda \\)-motifs\naccording to the link probabilities in the biadjacency matrix of the\nBiCM null model.</p>\n\n<p>The results can be saved either as a binary <code>.npy</code> or a\nhuman-readable <code>.csv</code> file, depending on <code>binary</code>.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<ul>\n<li><p>The total number of p-values that are calculated is split into\n<code>num_chunks</code> chunks, which are processed sequentially in order\nto avoid memory allocation errors. Note that a larger value of\n<code>num_chunks</code> will lead to less memory occupation, but comes at\nthe cost of slower processing speed.</p></li>\n<li><p>The output consists of a one-dimensional array of p-values. If\nthe bipartite layer <code>bip_set</code> contains <code>n</code> nodes, this means\nthat the array will contain \\( \\binom{n}{2} \\) entries. The\nindices <code>(i, j)</code> of the nodes corresponding to entry <code>k</code> in\nthe array can be reconstructed using the method\n<code>BiCM.flat2_triumat_idx()</code>. The number of nodes <code>n</code>\ncan be recovered from the length of the array with\n<code>BiCM.flat2_triumat_dim()</code></p></li>\n<li><p>If <code>binary == False</code>, the <code>filename</code> should end with\n<code>.csv</code>. If <code>binary == True</code>, it will be saved in binary NumPy\n<code>.npy</code> format and the suffix <code>.npy</code> will be appended\nautomatically. By default, the file is saved in binary format.</p></li>\n</ul>\n\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bip_set</strong>:  select row-nodes (<code>True</code>) or column-nodes (<code>False</code>)</li>\n<li><strong>parallel</strong>:  select whether the calculation of the p-values should\nbe run in parallel (<code>True</code>) or not (<code>False</code>)</li>\n<li><strong>filename</strong>:  name of the output file</li>\n<li><strong>delim</strong>:  delimiter between entries in the <code>.csv</code>file, default is\n<code>\\t</code></li>\n<li><strong>binary</strong>:  if <code>True</code>, the file will be saved in the binary\nNumPy format <code>.npy</code>, otherwise as <code>.csv</code></li>\n<li><strong>num_chunks</strong>:  number of chunks of p-value calculations that are\nperformed sequentially\n:raise ValueError: raise an error if the parameter <code>bip_set</code> is\nneither <code>True</code> nor <code>False</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">bip_set</span>,</span><span class=\"param\">\t<span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">delim</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">binary</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">num_chunks</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.get_lambda_motif_block", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.get_lambda_motif_block", "kind": "function", "doc": "<p>Return a subset of \\( \\Lambda \\)-motifs as observed in <code>mm</code>.</p>\n\n<p>Given the binary input matrix <code>mm</code>, count the number of\n\\( \\Lambda \\)-motifs for all the node couples specified by the\ninterval \\( \\left[k_1, k_2\\right[ \\).</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<ul>\n<li><p>The \\( \\Lambda \\)-motifs are counted between the <strong>row-nodes</strong>\nof the input matrix <code>mm</code>.</p></li>\n<li><p>If \\( k_2 \\equiv \\binom{mm.shape[0]}{2} \\), the interval\nbecomes \\( \\left[k_1, k_2\\right] \\).</p></li>\n</ul>\n\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mm</strong>:  binary matrix</li>\n<li><strong>k1</strong>:  lower interval limit</li>\n<li><strong>k2</strong>:  upper interval limit\n:returns: array of observed \\( \\Lambda \\)-motifs</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mm</span>, </span><span class=\"param\"><span class=\"n\">k1</span>, </span><span class=\"param\"><span class=\"n\">k2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.get_plambda_block", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.get_plambda_block", "kind": "function", "doc": "<p>Return a subset of the \\( \\Lambda \\) probability matrix.</p>\n\n<p>Given the biadjacency matrix <code>biad_mat</code> with\n\\( \\mathbf{M}_{rc} = p_{rc} \\), which describes the probabilities of\nrow-node <code>r</code> and column-node <code>c</code> being linked, the method returns\nthe matrix</p>\n\n<p>:math:<code>P(\\Lambda)_{ij} = \\left(M_{i\\alpha_1} \\cdot M_{j\\alpha_1},\nM_{i\\alpha_2} \\cdot M_{j\\alpha_2}, \\ldots\\right),</code></p>\n\n<p>for all the node couples in the interval\n\\( \\left[k_1, k_2\\right[ \\).  \\( (i, j) \\) are two <strong>row-nodes</strong>\nof <code>biad_mat</code> and \\( \\alpha_k \\) runs over the nodes in the\nopposite layer.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<ul>\n<li><p>The probabilities are calculated between the <strong>row-nodes</strong> of the\ninput matrix <code>biad_mat</code>.</p></li>\n<li><p>If \\( k_2 \\equiv \\binom{biad_mat.shape[0]}{2} \\), the\ninterval becomes \\( \\left[k1, k2\\right] \\).</p></li>\n</ul>\n\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>biad_mat</strong>:  biadjacency matrix</li>\n<li><strong>k1</strong>:  lower interval limit</li>\n<li><strong>k2</strong>:  upper interval limit\n:returns: \\( \\Lambda \\)-motif probability matrix</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">biad_mat</span>, </span><span class=\"param\"><span class=\"n\">k1</span>, </span><span class=\"param\"><span class=\"n\">k2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.get_pvalues_q", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.get_pvalues_q", "kind": "function", "doc": "<p>Calculate the p-values of the observed \\( \\Lambda \\)-motifs.</p>\n\n<p>For each number of \\( \\Lambda \\)-motifs in <code>nlam_mat</code> for the node\ninterval \\( \\left[k1, k2\\right[ \\), construct the Poisson Binomial\ndistribution using the corresponding\nprobabilities in <code>plam_mat</code> and calculate the p-value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>plam_mat</strong>:  array containing the list of probabilities for the\nsingle observations of \\( \\Lambda \\)-motifs</li>\n<li><strong>nlam_mat</strong>:  array containing the observations of\n\\( \\Lambda \\)-motifs</li>\n<li><strong>k1</strong>:  lower interval limit</li>\n<li><strong>k2</strong>:  upper interval limit</li>\n<li><strong>parallel</strong>:  if <code>True</code>, the calculation is executed in parallel;\nif <code>False</code>, only one process is started</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">plam_mat</span>, </span><span class=\"param\"><span class=\"n\">nlam_mat</span>, </span><span class=\"param\"><span class=\"n\">k1</span>, </span><span class=\"param\"><span class=\"n\">k2</span>, </span><span class=\"param\"><span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.add2inqueue", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.add2inqueue", "kind": "function", "doc": "<p>Add elements to the in-queue to calculate the p-values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nprocs</strong>:  number of processes running in parallel</li>\n<li><strong>plam_mat</strong>:  array containing the list of probabilities for the\nsingle observations of \\( \\Lambda \\)-motifs</li>\n<li><strong>nlam_mat</strong>:  array containing the observations of\n\\( \\Lambda \\)-motifs</li>\n<li><strong>k1</strong>:  lower interval limit</li>\n<li><strong>k2</strong>:  upper interval limit</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nprocs</span>, </span><span class=\"param\"><span class=\"n\">plam_mat</span>, </span><span class=\"param\"><span class=\"n\">nlam_mat</span>, </span><span class=\"param\"><span class=\"n\">k1</span>, </span><span class=\"param\"><span class=\"n\">k2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.pval_process_worker", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.pval_process_worker", "kind": "function", "doc": "<p>Calculate p-values and add them to the out-queue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.outqueue2pval_mat", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.outqueue2pval_mat", "kind": "function", "doc": "<p>Put the results from the out-queue into the p-value array.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nprocs</span>, </span><span class=\"param\"><span class=\"n\">pvalmat</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.get_triup_dim", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.get_triup_dim", "kind": "function", "doc": "<p>Return the number of possible node couples in <code>bip_set</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bip_set</strong>:  selects row-nodes (<code>True</code>) or column-nodes\n(<code>False</code>)\n:returns: return the number of node couple combinations corresponding\nto the layer <code>bip_set</code></li>\n</ul>\n\n<p>:raise ValueError: raise an error if the parameter <code>bip_set</code> is\n    neither <code>True</code> nor <code>False</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bip_set</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.split_range", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.split_range", "kind": "function", "doc": "<p>Split the interval \\( \\left[0,\\ldots, n\\right] \\) in <code>m</code> parts.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n</strong>:  upper limit of the range</li>\n<li><strong>m</strong>:  number of part in which range should be split\n:returns: delimiter indices for the <code>m</code> parts</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">m</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.triumat2flat_idx", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.triumat2flat_idx", "kind": "function", "doc": "<p>Convert an matrix index couple to a flattened array index.</p>\n\n<p>Given a square matrix of dimension <code>n</code> and the index couple\n<code>(i, j)</code> <em>of the upper triangular part</em> of the matrix, return the\nindex which the matrix element would have in a flattened array.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<ul>\n<li>\\( i \\in [0, ..., n - 1] \\)</li>\n<li>\\( j \\in [i + 1, ..., n - 1] \\)</li>\n<li>returned index \\( \\in [0,\\, n (n - 1) / 2 - 1] \\)</li>\n</ul>\n\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>i</strong>:  row index</li>\n<li><strong>j</strong>:  column index</li>\n<li><strong>n</strong>:  dimension of the square matrix\n:returns: flattened array index</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">i</span>, </span><span class=\"param\"><span class=\"n\">j</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.triumat2flat_dim", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.triumat2flat_dim", "kind": "function", "doc": "<p>Return the size of the triangular part of a <code>n x n</code> matrix.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n</strong>:  the dimension of the square matrix\n:returns: number of elements in the upper triangular part of the matrix\n(excluding the diagonal)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.flat2triumat_dim", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.flat2triumat_dim", "kind": "function", "doc": "<p>Return the dimension of the matrix hosting <code>k</code> triangular elements.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>k</strong>:  the number of elements in the upper triangular\npart of the corresponding square matrix, excluding the diagonal\n:returns: dimension of the corresponding square matrix</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">k</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.flat2triumat_idx", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.flat2triumat_idx", "kind": "function", "doc": "<p>Convert an array index into the index couple of a triangular matrix.</p>\n\n<p><code>k</code> is the index of an array of length \\( \\binom{n}{2}{2} \\),\nwhich contains the elements of an upper triangular matrix of dimension\n<code>n</code> excluding the diagonal. The function returns the index couple\n\\( (i, j) \\) that corresponds to the entry <code>k</code> of the flat array.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<ul>\n<li>\\( k \\in \\left[0,\\ldots, \\binom{n}{2} - 1\\right] \\)</li>\n<li>returned indices:\n<ul>\n<li>\\( i \\in [0,\\ldots, n - 1] \\)</li>\n<li>\\( j \\in [i + 1,\\ldots, n - 1] \\)</li>\n</ul></li>\n</ul>\n\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>k</strong>:  flattened array index</li>\n<li><strong>n</strong>:  dimension of the square matrix\n:returns: matrix index tuple (row, column)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">k</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.save_biadjacency", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.save_biadjacency", "kind": "function", "doc": "<p>Save the biadjacendy matrix of the BiCM null model.</p>\n\n<p>The matrix can either be saved as a binary NumPy <code>.npy</code> file or as a\nhuman-readable <code>.csv</code> file.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<ul>\n<li><p>The relative path has to be provided in the filename, e.g.\n<em>../data/pvalue_matrix.csv</em>.</p></li>\n<li><p>If <code>binary==True</code>, NumPy\nautomatically appends the format ending <code>.npy</code> to the file.</p></li>\n</ul>\n\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong>:  name of the output file</li>\n<li><strong>delim</strong>:  delimiter between values in file</li>\n<li><strong>binary</strong>:  if <code>True</code>, save as binary <code>.npy</code>, otherwise as a\n<code>.csv</code> file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">delim</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">&#39;</span>, </span><span class=\"param\"><span class=\"n\">binary</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.bicm.BiCM.save_array", "modulename": "divAtScale.src.bipartite_config.src.bicm", "qualname": "BiCM.save_array", "kind": "function", "doc": "<p>Save the array <code>mat</code> in the file <code>filename</code>.</p>\n\n<p>The array can either be saved as a binary NumPy <code>.npy</code> file or as a\nhuman-readable <code>.npy</code> file.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<ul>\n<li><p>The relative path has to be provided in the filename, e.g.\n<em>../data/pvalue_matrix.csv</em>.</p></li>\n<li><p>If <code>binary==True</code>, NumPy\nautomatically appends the format ending <code>.npy</code> to the file.</p></li>\n</ul>\n\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mat</strong>:  array</li>\n<li><strong>filename</strong>:  name of the output file</li>\n<li><strong>delim</strong>:  delimiter between values in file</li>\n<li><strong>binary</strong>:  if <code>True</code>, save as binary <code>.npy</code>, otherwise as a\n<code>.csv</code> file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mat</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">delim</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">&#39;</span>, </span><span class=\"param\"><span class=\"n\">binary</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.custom_functions", "modulename": "divAtScale.src.bipartite_config.src.custom_functions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.custom_functions.threshold_array", "modulename": "divAtScale.src.bipartite_config.src.custom_functions", "qualname": "threshold_array", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.05</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.custom_functions.comp_gamma", "modulename": "divAtScale.src.bipartite_config.src.custom_functions", "qualname": "comp_gamma", "kind": "function", "doc": "<ul>\n<li>overlap score</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">matrix_cutoff</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.custom_functions.run_bicm", "modulename": "divAtScale.src.bipartite_config.src.custom_functions", "qualname": "run_bicm", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mat</strong>: </li>\n<li><strong>alpha</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mat</span>, </span><span class=\"param\"><span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.05</span>, </span><span class=\"param\"><span class=\"n\">k1</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">mat_cut</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.custom_functions.compute_gamma_per_aff", "modulename": "divAtScale.src.bipartite_config.src.custom_functions", "qualname": "compute_gamma_per_aff", "kind": "function", "doc": "<p>** Get gamma overlap score for user sessions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>aff</strong>: </li>\n<li><strong>u_df</strong>: </li>\n<li><strong>debug</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">aff</span>, </span><span class=\"param\"><span class=\"n\">u_df</span>, </span><span class=\"param\"><span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.custom_functions.evaluate", "modulename": "divAtScale.src.bipartite_config.src.custom_functions", "qualname": "evaluate", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>O</strong>: </li>\n<li><strong>aff</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">O</span>, </span><span class=\"param\"><span class=\"n\">aff</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.custom_functions.compute_gamma_inter_aff", "modulename": "divAtScale.src.bipartite_config.src.custom_functions", "qualname": "compute_gamma_inter_aff", "kind": "function", "doc": "<p>** Get gamma overlap score for user sessions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>aff1</strong>: </li>\n<li><strong>af2</strong>: </li>\n<li><strong>u_df</strong>: </li>\n<li><strong>debug</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">aff1</span>, </span><span class=\"param\"><span class=\"n\">aff2</span>, </span><span class=\"param\"><span class=\"n\">u_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin", "modulename": "divAtScale.src.bipartite_config.src.poibin", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin.poibin", "modulename": "divAtScale.src.bipartite_config.src.poibin.poibin", "kind": "module", "doc": "<p>Created on Tue Mar 29, 2016</p>\n\n<p>Module:\n    poibin - Poisson Binomial Distribution</p>\n\n<p>Author:\n    Mika Straka</p>\n\n<p>Description:\n    Implementation of the Poisson Binomial distribution for the sum of\n    independent and not identically distributed random variables as described\n    in the reference [Hong2013]_.</p>\n\n<pre><code>Implemented method:\n\n    * ``pmf``: probability mass function\n    * ``cdf``: cumulative distribution function\n    * ``pval``: p-value (1 - cdf)\n</code></pre>\n\n<p>Usage:\n    Be <code>p</code> a list or  NumPy array of success probabilities for <code>n</code>\n    non-identically distributed Bernoulli random variables.</p>\n\n<pre><code>Import the module and create an instance of the distribution with::\n\n    #&gt;&gt;&gt; from poibin import PoiBin\n    #&gt;&gt;&gt; pb = PoiBin(p)\n\nBe ``x`` a list or NumPy array of different number of successes.\nTo obtain the:\n\n* probability mass function of x, use::\n\n    #&gt;&gt;&gt; pb.pmf(x)\n\n* cumulative distribution function of x, use::\n\n    #&gt;&gt;&gt; pb.cdf(x)\n\n* p-values of x, use::\n\n    #&gt;&gt;&gt; pb.pval(x)\n\nThe functions are applied component-wise and a NumPy array of the same\nlength as ``x`` is returned.\n</code></pre>\n\n<p>References:\n.. [Hong2013] Yili Hong, On computing the distribution function for the Poisson\n    binomial distribution,\n    Computational Statistics &amp; Data Analysis, Volume 59, March 2013,\n    Pages 41-51, ISSN 0167-9473,\n    <a href=\"http://dx.doi.org/10.1016/j.csda.2012.10.006\">http://dx.doi.org/10.1016/j.csda.2012.10.006</a>.</p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin.poibin.PoiBin", "modulename": "divAtScale.src.bipartite_config.src.poibin.poibin", "qualname": "PoiBin", "kind": "class", "doc": "<p>Poisson Binomial distribution for random variables.</p>\n\n<p>This class implements the Poisson Binomial distribution for Bernoulli\ntrials with different success probabilities. The distribution describes\nthus a random variable that is the sum of independent and not identically\ndistributed single Bernoulli random variables.</p>\n\n<p>The class offers methods for calculating the probability mass function, the\ncumulative distribution function, and p-values for right-sided testing.</p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin.poibin.PoiBin.__init__", "modulename": "divAtScale.src.bipartite_config.src.poibin.poibin", "qualname": "PoiBin.__init__", "kind": "function", "doc": "<p>Initialize the class and calculate the <code>pmf</code> and <code>cdf</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probabilities: sequence of success probabilities :math</strong>: <code>p_i \\in\n[0, 1] \\forall i \\in [0, N]</code> for \\( N \\) independent but not\nidentically distributed Bernoulli random variables</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probabilities</span></span>)</span>"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin.poibin.PoiBin.success_probabilities", "modulename": "divAtScale.src.bipartite_config.src.poibin.poibin", "qualname": "PoiBin.success_probabilities", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin.poibin.PoiBin.number_trials", "modulename": "divAtScale.src.bipartite_config.src.poibin.poibin", "qualname": "PoiBin.number_trials", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin.poibin.PoiBin.omega", "modulename": "divAtScale.src.bipartite_config.src.poibin.poibin", "qualname": "PoiBin.omega", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin.poibin.PoiBin.pmf_list", "modulename": "divAtScale.src.bipartite_config.src.poibin.poibin", "qualname": "PoiBin.pmf_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin.poibin.PoiBin.cdf_list", "modulename": "divAtScale.src.bipartite_config.src.poibin.poibin", "qualname": "PoiBin.cdf_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin.poibin.PoiBin.pmf", "modulename": "divAtScale.src.bipartite_config.src.poibin.poibin", "qualname": "PoiBin.pmf", "kind": "function", "doc": "<p>Calculate the probability mass function <code>pmf</code> for the input values.</p>\n\n<p>The <code>pmf</code> is defined as</p>\n\n<p>$$pmf(k) = Pr(X = k), k = 0, 1, ..., n.$$</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number_successes</strong>:  number of successful trials for which the\nprobability mass function is calculated</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number_successes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin.poibin.PoiBin.cdf", "modulename": "divAtScale.src.bipartite_config.src.poibin.poibin", "qualname": "PoiBin.cdf", "kind": "function", "doc": "<p>Calculate the cumulative distribution function for the input values.</p>\n\n<p>The cumulative distribution function <code>cdf</code> for a number <code>k</code> of\nsuccesses is defined as</p>\n\n<p>$$cdf(k) = Pr(X \\leq k), k = 0, 1, ..., n.$$</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number_successes</strong>:  number of successful trials for which the\ncumulative distribution function is calculated</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number_successes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin.poibin.PoiBin.pval", "modulename": "divAtScale.src.bipartite_config.src.poibin.poibin", "qualname": "PoiBin.pval", "kind": "function", "doc": "<p>Return the p-values corresponding to the input numbers of successes.</p>\n\n<p>The p-values for right-sided testing are defined as</p>\n\n<p>$$pval(k) = Pr(X \\geq k ),  k = 0, 1, ..., n.$$</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>Since \\( cdf(k) = Pr(X &lt;= k) \\), the function returns</p>\n\n<p>.. math::</p>\n\n<pre><code>1 - cdf(X &lt; k) &amp; = 1 - cdf(X &lt;= k - 1)\n               &amp; = 1 - cdf(X &lt;= k) + pmf(X = k),\n\n               k = 0, 1, .., n.\n</code></pre>\n\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number_successes</strong>:  number of successful trials for which the\np-value is calculated</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number_successes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin.poibin.PoiBin.get_cdf", "modulename": "divAtScale.src.bipartite_config.src.poibin.poibin", "qualname": "PoiBin.get_cdf", "kind": "function", "doc": "<p>Return the values of the cumulative density function.</p>\n\n<p>Return a list which contains all the values of the cumulative\ndensity function for \\( i = 0, 1, ..., n \\).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>event_probabilities</strong>:  array of single event probabilities</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event_probabilities</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin.poibin.PoiBin.get_pmf_xi", "modulename": "divAtScale.src.bipartite_config.src.poibin.poibin", "qualname": "PoiBin.get_pmf_xi", "kind": "function", "doc": "<p>Return the values of the variable <code>xi</code>.</p>\n\n<p>The components <code>xi</code> make up the probability mass function, i.e.\n\\( \\xi(k) = pmf(k) = Pr(X = k) \\).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin.poibin.PoiBin.get_chi", "modulename": "divAtScale.src.bipartite_config.src.poibin.poibin", "qualname": "PoiBin.get_chi", "kind": "function", "doc": "<p>Return the values of <code>chi</code> for the specified indices.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>idx_array</strong>:  array of indices for which the <code>chi</code> values should\nbe calculated</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx_array</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin.poibin.PoiBin.check_rv_input", "modulename": "divAtScale.src.bipartite_config.src.poibin.poibin", "qualname": "PoiBin.check_rv_input", "kind": "function", "doc": "<p>Assert that the input values <code>number_successes</code> are OK.</p>\n\n<p>The input values <code>number_successes</code> for the random variable have to be\nintegers, greater or equal to 0, and smaller or equal to the total\nnumber of trials <code>self.number_trials</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number_successes</strong>:  number of successful trials</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number_successes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin.poibin.PoiBin.check_xi_are_real", "modulename": "divAtScale.src.bipartite_config.src.poibin.poibin", "qualname": "PoiBin.check_xi_are_real", "kind": "function", "doc": "<p>Check whether all the <code>xi</code>s have imaginary part equal to 0.</p>\n\n<p>The probabilities \\( \\xi(k) = pmf(k) = Pr(X = k) \\) have to be\npositive and must have imaginary part equal to zero.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>xi_values</strong>:  single event probabilities</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xi_values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.bipartite_config.src.poibin.poibin.PoiBin.check_input_prob", "modulename": "divAtScale.src.bipartite_config.src.poibin.poibin", "qualname": "PoiBin.check_input_prob", "kind": "function", "doc": "<p>Check that all the input probabilities are in the interval [0, 1].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers", "modulename": "divAtScale.src.helpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.helpers.dataset_helpers", "modulename": "divAtScale.src.helpers.dataset_helpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.helpers.dataset_helpers.read_x_process", "modulename": "divAtScale.src.helpers.dataset_helpers.read_x_process", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.helpers.dataset_helpers.read_x_process.grab_sess", "modulename": "divAtScale.src.helpers.dataset_helpers.read_x_process", "qualname": "grab_sess", "kind": "function", "doc": "<p>Get sessions from listening hist. df</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lh_df</strong>:  listening history df</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>sessions</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lh_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.dataset_helpers.read_x_process.read_config", "modulename": "divAtScale.src.helpers.dataset_helpers.read_x_process", "qualname": "read_config", "kind": "function", "doc": "<p>Read configuration file used to run all experiments</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_path</strong>:  path to config</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>config data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.dataset_helpers.read_x_process.reformat_2022", "modulename": "divAtScale.src.helpers.dataset_helpers.read_x_process", "qualname": "reformat_2022", "kind": "function", "doc": "<p>Reformat to match 2018 year</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sess_df</strong>:  listening hist df</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>formatted listening hist df</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sess_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.dataset_helpers.read_x_process.filter_2_get_greater_than_n_sess", "modulename": "divAtScale.src.helpers.dataset_helpers.read_x_process", "qualname": "filter_2_get_greater_than_n_sess", "kind": "function", "doc": "<p>Subset df to only consider users who have &gt; thresh sessions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sess_df</strong>:  listening history df</li>\n<li><strong>thresh</strong>:  thresh+1 indicates min number of sessions per. user</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>filtered listening hist df.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sess_df</span>, </span><span class=\"param\"><span class=\"n\">thresh</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.dataset_helpers.read_x_process.sess_meta_data", "modulename": "divAtScale.src.helpers.dataset_helpers.read_x_process", "qualname": "sess_meta_data", "kind": "function", "doc": "<p>Generate meta data: i.e. per (uid, sess) type: number of artists (n_a), session length (sess_l)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sess_df</strong>:  listening history df</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>meta_data df.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sess_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.dataset_helpers.read_x_process.print_le_stats", "modulename": "divAtScale.src.helpers.dataset_helpers.read_x_process", "qualname": "print_le_stats", "kind": "function", "doc": "<p>Print low level measures w.r.t listening history set</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>u_sess_df</strong>:  listening history df</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">u_sess_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.dataset_helpers.read_x_process.load_fs1", "modulename": "divAtScale.src.helpers.dataset_helpers.read_x_process", "qualname": "load_fs1", "kind": "function", "doc": "<p>Load all 4 fs1 datasets</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_path</strong>:  optional, path to data_dir</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>P,Q,A,E monadic, non-fandom sessions.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.dataset_helpers.read_x_process.sub_sample_lh_df", "modulename": "divAtScale.src.helpers.dataset_helpers.read_x_process", "qualname": "sub_sample_lh_df", "kind": "function", "doc": "<p>Filter df to only contain n randomly sampled users</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>le_df</strong>:  listening history df</li>\n<li><strong>n_sample</strong>:  n. users to sample</li>\n<li><strong>seed</strong>:  seed for user sample</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>sampled listening hist df.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">le_df</span>, </span><span class=\"param\"><span class=\"n\">n_sample</span>, </span><span class=\"param\"><span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.dataset_helpers.read_x_process.load_fs2_inter_condition", "modulename": "divAtScale.src.helpers.dataset_helpers.read_x_process", "qualname": "load_fs2_inter_condition", "kind": "function", "doc": "<p>Load fs2 (multi-affordance u) dataset and sub-sample based on users having &gt; thresh sessions in each affordance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>y</strong>:  year of listening hist.</li>\n<li><strong>data_path</strong>:  path to fs2 dataset</li>\n<li><strong>thresh</strong>:   thresh+1 indicates min number of sessions per. user</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>filtered lh dataset for given affordance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">data_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;../../data/&#39;</span>, </span><span class=\"param\"><span class=\"n\">thresh</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.dataset_helpers.read_x_process.load_session_df", "modulename": "divAtScale.src.helpers.dataset_helpers.read_x_process", "qualname": "load_session_df", "kind": "function", "doc": "<p>Load sess df which contains all sess (monad,dyad,triad,tetrad) in March y</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>y</strong>:  year to load</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>listening hist df</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">2023</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.semantic_helpers", "modulename": "divAtScale.src.helpers.semantic_helpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.diversity_measures", "modulename": "divAtScale.src.helpers.semantic_helpers.diversity_measures", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.diversity_measures.comp_w_centroid", "modulename": "divAtScale.src.helpers.semantic_helpers.diversity_measures", "qualname": "comp_w_centroid", "kind": "function", "doc": "<p>Compute a sessions activity weighted centroid in embedding space</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>s</strong>:  session (artist ids)</li>\n<li><strong>e</strong>:  embedding matrix</li>\n<li><strong>aid2mid</strong>:  matrix index lookup</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>centroid</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">e</span>, </span><span class=\"param\"><span class=\"n\">aid2mid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.diversity_measures.gs_score", "modulename": "divAtScale.src.helpers.semantic_helpers.diversity_measures", "qualname": "gs_score", "kind": "function", "doc": "<p>Compute Anderson et al.'s GS-score</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>s</strong>:  session</li>\n<li><strong>e</strong>:  embedding matrix</li>\n<li><strong>aid2mid</strong>:  matrix index lookup</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>gs_score for a given session</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">e</span>, </span><span class=\"param\"><span class=\"n\">aid2mid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.diversity_measures.gs_score_inter_sess", "modulename": "divAtScale.src.helpers.semantic_helpers.diversity_measures", "qualname": "gs_score_inter_sess", "kind": "function", "doc": "<p>Compute Anderson et al.'s GS-score between multiple sessions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>S</strong>:  list of sessions (artist ids)</li>\n<li><strong>e</strong>:  embedding matrix</li>\n<li><strong>aid2mid</strong>:  matrix index lookup</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>gs_score for a given session</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">S</span>, </span><span class=\"param\"><span class=\"n\">e</span>, </span><span class=\"param\"><span class=\"n\">aid2mid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.diversity_measures.sim_inter_aff", "modulename": "divAtScale.src.helpers.semantic_helpers.diversity_measures", "qualname": "sim_inter_aff", "kind": "function", "doc": "<p>Compute cosine similarity between avg. rep of two session centroids generated from two distinct affordances.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>S</strong>:  list of sessions (artist ids)</li>\n<li><strong>e</strong>:  embedding matrix</li>\n<li><strong>aid2mid</strong>:  matrix index lookup</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>cosine similarity between two affordances\n  :rtype float</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">S1</span>, </span><span class=\"param\"><span class=\"n\">S2</span>, </span><span class=\"param\"><span class=\"n\">e</span>, </span><span class=\"param\"><span class=\"n\">aid2mid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.diversity_measures.comp_gs_intra_or_inter_fs2", "modulename": "divAtScale.src.helpers.semantic_helpers.diversity_measures", "qualname": "comp_gs_intra_or_inter_fs2", "kind": "function", "doc": "<p>Top level function to compute gs-scores between (inter) or wihtin (intra) sessions w.r.t. fs2 filtering.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lh_df</strong>:  listening event df</li>\n<li><strong>e</strong>:  embedding matrix</li>\n<li><strong>aid2mid</strong>:  matrix index lookup for e</li>\n<li><strong>n_sample</strong>:  applied for testing. if != -1 sample n_sample users at random</li>\n<li><strong>scale</strong>:  'intra' OR 'inter'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>all users gs scores in Q,P,A,E. Each row corresponds to a user</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lh_df</span>, </span><span class=\"param\"><span class=\"n\">e</span>, </span><span class=\"param\"><span class=\"n\">aid2mid</span>, </span><span class=\"param\"><span class=\"n\">n_sample</span><span class=\"o\">=-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"s1\">&#39;intra&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.diversity_measures.comp_gs_intra_or_inter_fs1", "modulename": "divAtScale.src.helpers.semantic_helpers.diversity_measures", "qualname": "comp_gs_intra_or_inter_fs1", "kind": "function", "doc": "<p>Top level function to compute gs-scores between (inter) or wihtin (intra) sessions w.r.t. fs1 filtering.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>monad_df_filt</strong>:  listening history for monadic sessions (i.e. either P|Q|A|E)</li>\n<li><strong>e</strong>:  embedding matrix</li>\n<li><strong>aid2mid</strong>:  matrix index lookup for e</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>gs for all users. rows correspond to users</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">monad_df_filt</span>, </span><span class=\"param\"><span class=\"n\">e</span>, </span><span class=\"param\"><span class=\"n\">aid2mid</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"s1\">&#39;intra&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.diversity_measures.get_sim_between_aff", "modulename": "divAtScale.src.helpers.semantic_helpers.diversity_measures", "qualname": "get_sim_between_aff", "kind": "function", "doc": "<p>Top level function to compute semantic (cosine) similarity between all affordances for all users.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>le_df</strong>:  listening  history df</li>\n<li><strong>e</strong>:  embedding matrix</li>\n<li><strong>aid2mid</strong>:   matrix index lookup for e</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>similarity for [Q-P, Q-A, Q-E, P-A, P-E, A-E]. Rows correspond to users</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">le_df</span>, </span><span class=\"param\"><span class=\"n\">e</span>, </span><span class=\"param\"><span class=\"n\">aid2mid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.generate_svd_space", "modulename": "divAtScale.src.helpers.semantic_helpers.generate_svd_space", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.generate_svd_space.SVD_builder", "modulename": "divAtScale.src.helpers.semantic_helpers.generate_svd_space", "qualname": "SVD_builder", "kind": "class", "doc": "<p>SVD builder</p>\n\n<p>Contains various fine-grained capabilities including:</p>\n\n<ol>\n<li>svd construction with balanced affordances</li>\n<li>saving ppmi matrix pre-embedding for later analysis</li>\n</ol>\n"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.generate_svd_space.SVD_builder.__init__", "modulename": "divAtScale.src.helpers.semantic_helpers.generate_svd_space", "qualname": "SVD_builder.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>balanced</strong>:  option for balanced affordance construction</li>\n<li><strong>base_path</strong>:  path to data dir</li>\n<li><strong>y</strong>:  year</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">balanced</span>, </span><span class=\"param\"><span class=\"n\">base_path</span></span>)</span>"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.generate_svd_space.SVD_builder.e", "modulename": "divAtScale.src.helpers.semantic_helpers.generate_svd_space", "qualname": "SVD_builder.e", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.generate_svd_space.SVD_builder.mid2aid_lookup", "modulename": "divAtScale.src.helpers.semantic_helpers.generate_svd_space", "qualname": "SVD_builder.mid2aid_lookup", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.generate_svd_space.SVD_builder.balanced", "modulename": "divAtScale.src.helpers.semantic_helpers.generate_svd_space", "qualname": "SVD_builder.balanced", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.generate_svd_space.SVD_builder.data_dir", "modulename": "divAtScale.src.helpers.semantic_helpers.generate_svd_space", "qualname": "SVD_builder.data_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.generate_svd_space.SVD_builder.create_folder_if_not_exists", "modulename": "divAtScale.src.helpers.semantic_helpers.generate_svd_space", "qualname": "SVD_builder.create_folder_if_not_exists", "kind": "function", "doc": "<p>As per function name</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>folder_path</strong>:  path to check and create dir</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">folder_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.generate_svd_space.SVD_builder.create_co_occurences_matrix", "modulename": "divAtScale.src.helpers.semantic_helpers.generate_svd_space", "qualname": "SVD_builder.create_co_occurences_matrix", "kind": "function", "doc": "<p>Construct artist-artist co-occurance matrix given list of sessions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>allowed_artists</strong>:  if we wish to focus on a subset of artists to construct matirx.</li>\n<li><strong>sessions</strong>:  a list of sessions containing artist_ids streamed by users.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>co-occurance matrix, artist id 2 matrix index lookup</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">allowed_artists</span>, </span><span class=\"param\"><span class=\"n\">sessions</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.generate_svd_space.SVD_builder.ppmi", "modulename": "divAtScale.src.helpers.semantic_helpers.generate_svd_space", "qualname": "SVD_builder.ppmi", "kind": "function", "doc": "<p>Compute positive point wise mutual information matrix from A</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>A</strong>:  co-occurance matrix to run ppmi on</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>ppmi matrix</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">A</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.generate_svd_space.SVD_builder.grab_sess", "modulename": "divAtScale.src.helpers.semantic_helpers.generate_svd_space", "qualname": "SVD_builder.grab_sess", "kind": "function", "doc": "<p>Get sessions from listening history &amp; filter artist repeats &amp; fandom sessions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sess_df</strong>:  listening history df</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>filtered sessions</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sess_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.generate_svd_space.SVD_builder.generate_e", "modulename": "divAtScale.src.helpers.semantic_helpers.generate_svd_space", "qualname": "SVD_builder.generate_e", "kind": "function", "doc": "<p>Pipeline to generate svd-based artist embedding from session data.</p>\n\n<p>saves embedding matrix and mid2aid lookup as class variables.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sess_df</strong>:  listening history df</li>\n<li><strong>save_pmi_matrix</strong>:  optional - save ppmi matrix</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sess_df</span>, </span><span class=\"param\"><span class=\"n\">save_pmi_matrix</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.semantic_helpers.generate_svd_space.SVD_builder.save_all", "modulename": "divAtScale.src.helpers.semantic_helpers.generate_svd_space", "qualname": "SVD_builder.save_all", "kind": "function", "doc": "<p>Save embedding (e) and mid2aid lookup to memory</p>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.set_helpers", "modulename": "divAtScale.src.helpers.set_helpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.helpers.set_helpers.diversity_measures", "modulename": "divAtScale.src.helpers.set_helpers.diversity_measures", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "divAtScale.src.helpers.set_helpers.diversity_measures.compute_percentile_score", "modulename": "divAtScale.src.helpers.set_helpers.diversity_measures", "qualname": "compute_percentile_score", "kind": "function", "doc": "<p>Strict percentile score</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>R</strong>:  array of redundancy scores</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>percentile score for each session.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">R</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src.helpers.set_helpers.diversity_measures.comp_R", "modulename": "divAtScale.src.helpers.set_helpers.diversity_measures", "qualname": "comp_R", "kind": "function", "doc": "<p>Compute Redundancy (R = 1 - A/P)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>s</strong>:  a session of artist ids</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>R.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "divAtScale.src", "modulename": "divAtScale.src", "kind": "module", "doc": "<p></p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();